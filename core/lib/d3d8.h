/*
 * Copyright Â© Windower Dev Team
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation files
 * (the "Software"),to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef WINDOWER_D3D8_H
#define WINDOWER_D3D8_H

#include <windows.h>

#include <unknwn.h>

::GUID const IID_IDirect3D8 = {0x1dd9e8da, 0x1c77, 0x4d40, 0xb0, 0xcf, 0x98,
                               0xfe,       0xfd,   0xff,   0x95, 0x12};
::GUID const IID_IDirect3DDevice8 = {
    0x7385e5df, 0x8fe8, 0x41d5, 0x86, 0xb6, 0xd7, 0xb4, 0x85, 0x47, 0xb6, 0xcf};

#define MAX_DEVICE_IDENTIFIER_STRING 512

#define D3DCREATE_FPU_PRESERVE 0x00000002L
#define D3DCREATE_MULTITHREADED 0x00000004L
#define D3DCREATE_PUREDEVICE 0x00000010L
#define D3DCREATE_SOFTWARE_VERTEXPROCESSING 0x00000020L
#define D3DCREATE_HARDWARE_VERTEXPROCESSING 0x00000040L
#define D3DCREATE_MIXED_VERTEXPROCESSING 0x00000080L

#define D3DFVF_RESERVED0 0x001
#define D3DFVF_POSITION_MASK 0x00E
#define D3DFVF_XYZ 0x002
#define D3DFVF_XYZRHW 0x004
#define D3DFVF_XYZB1 0x006
#define D3DFVF_XYZB2 0x008
#define D3DFVF_XYZB3 0x00A
#define D3DFVF_XYZB4 0x00C
#define D3DFVF_XYZB5 0x00E

#define D3DFVF_NORMAL 0x010
#define D3DFVF_PSIZE 0x020
#define D3DFVF_DIFFUSE 0x040
#define D3DFVF_SPECULAR 0x080

#define D3DFVF_TEXCOUNT_MASK 0xF00
#define D3DFVF_TEXCOUNT_SHIFT 8
#define D3DFVF_TEX0 0x000
#define D3DFVF_TEX1 0x100
#define D3DFVF_TEX2 0x200
#define D3DFVF_TEX3 0x300
#define D3DFVF_TEX4 0x400
#define D3DFVF_TEX5 0x500
#define D3DFVF_TEX6 0x600
#define D3DFVF_TEX7 0x700
#define D3DFVF_TEX8 0x800

#define D3DFVF_LASTBETA_UBYTE4 0x1000

#define D3DFVF_RESERVED2 0xE000

#define D3DUSAGE_RENDERTARGET 0x00000001L
#define D3DUSAGE_DEPTHSTENCIL 0x00000002L
#define D3DUSAGE_WRITEONLY 0x00000008L
#define D3DUSAGE_SOFTWAREPROCESSING 0x00000010L
#define D3DUSAGE_DONOTCLIP 0x00000020L
#define D3DUSAGE_POINTS 0x00000040L
#define D3DUSAGE_RTPATCHES 0x00000080L
#define D3DUSAGE_NPATCHES 0x00000100L
#define D3DUSAGE_DYNAMIC 0x00000200L

#define D3DLOCK_READONLY 0x00000010
#define D3DLOCK_DISCARD 0x00002000
#define D3DLOCK_NOOVERWRITE 0x00001000
#define D3DLOCK_NOSYSLOCK 0x00000800
#define D3DLOCK_NO_DIRTY_UPDATE 0x00008000

#define D3DTA_SELECTMASK 0x0000000F
#define D3DTA_DIFFUSE 0x00000000
#define D3DTA_CURRENT 0x00000001
#define D3DTA_TEXTURE 0x00000002
#define D3DTA_TFACTOR 0x00000003
#define D3DTA_SPECULAR 0x00000004
#define D3DTA_TEMP 0x00000005
#define D3DTA_COMPLEMENT 0x00000010
#define D3DTA_ALPHAREPLICATE 0x00000020

#define D3DCAPS_READ_SCANLINE 0x00020000

#define D3DCAPS2_NO2DDURING3DSCENE 0x00000002
#define D3DCAPS2_FULLSCREENGAMMA 0x00020000
#define D3DCAPS2_CANRENDERWINDOWED 0x00080000
#define D3DCAPS2_CANCALIBRATEGAMMA 0x00100000
#define D3DCAPS2_RESERVED 0x02000000
#define D3DCAPS2_CANMANAGERESOURCE 0x10000000
#define D3DCAPS2_DYNAMICTEXTURES 0x20000000

#define D3DCAPS3_RESERVED 0x8000001F
#define D3DCAPS3_ALPHA_FULLSCREEN_FLIP_OR_DISCARD 0x00000020

#define D3DCLEAR_TARGET 0x00000001L
#define D3DCLEAR_ZBUFFER 0x00000002L
#define D3DCLEAR_STENCIL 0x00000004L

#define D3DPRESENT_INTERVAL_DEFAULT 0x00000000
#define D3DPRESENT_INTERVAL_ONE 0x00000001
#define D3DPRESENT_INTERVAL_TWO 0x00000002
#define D3DPRESENT_INTERVAL_THREE 0x00000004
#define D3DPRESENT_INTERVAL_FOUR 0x00000008
#define D3DPRESENT_INTERVAL_IMMEDIATE 0x80000000

#define D3DCURSORCAPS_COLOR 0x00000001
#define D3DCURSORCAPS_LOWRES 0x00000002

#define D3DDEVCAPS_EXECUTESYSTEMMEMORY 0x00000010
#define D3DDEVCAPS_EXECUTEVIDEOMEMORY 0x00000020
#define D3DDEVCAPS_TLVERTEXSYSTEMMEMORY 0x00000040
#define D3DDEVCAPS_TLVERTEXVIDEOMEMORY 0x00000080
#define D3DDEVCAPS_TEXTURESYSTEMMEMORY 0x00000100
#define D3DDEVCAPS_TEXTUREVIDEOMEMORY 0x00000200
#define D3DDEVCAPS_DRAWPRIMTLVERTEX 0x00000400
#define D3DDEVCAPS_CANRENDERAFTERFLIP 0x00000800
#define D3DDEVCAPS_TEXTURENONLOCALVIDMEM 0x00001000
#define D3DDEVCAPS_DRAWPRIMITIVES2 0x00002000
#define D3DDEVCAPS_SEPARATETEXTUREMEMORIES 0x00004000
#define D3DDEVCAPS_DRAWPRIMITIVES2EX 0x00008000
#define D3DDEVCAPS_HWTRANSFORMANDLIGHT 0x00010000
#define D3DDEVCAPS_CANBLTSYSTONONLOCAL 0x00020000
#define D3DDEVCAPS_HWRASTERIZATION 0x00080000
#define D3DDEVCAPS_PUREDEVICE 0x00100000
#define D3DDEVCAPS_QUINTICRTPATCHES 0x00200000
#define D3DDEVCAPS_RTPATCHES 0x00400000
#define D3DDEVCAPS_RTPATCHHANDLEZERO 0x00800000
#define D3DDEVCAPS_NPATCHES 0x01000000

#define D3DPMISCCAPS_MASKZ 0x00000002
#define D3DPMISCCAPS_LINEPATTERNREP 0x00000004
#define D3DPMISCCAPS_CULLNONE 0x00000010
#define D3DPMISCCAPS_CULLCW 0x00000020
#define D3DPMISCCAPS_CULLCCW 0x00000040
#define D3DPMISCCAPS_COLORWRITEENABLE 0x00000080
#define D3DPMISCCAPS_CLIPPLANESCALEDPOINTS 0x00000100
#define D3DPMISCCAPS_CLIPTLVERTS 0x00000200
#define D3DPMISCCAPS_TSSARGTEMP 0x00000400
#define D3DPMISCCAPS_BLENDOP 0x00000800
#define D3DPMISCCAPS_NULLREFERENCE 0x00001000

#define D3DLINECAPS_TEXTURE 0x00000001
#define D3DLINECAPS_ZTEST 0x00000002
#define D3DLINECAPS_BLEND 0x00000004
#define D3DLINECAPS_ALPHACMP 0x00000008
#define D3DLINECAPS_FOG 0x00000010

#define D3DPRASTERCAPS_DITHER 0x00000001
#define D3DPRASTERCAPS_PAT 0x00000008
#define D3DPRASTERCAPS_ZTEST 0x00000010
#define D3DPRASTERCAPS_FOGVERTEX 0x00000080
#define D3DPRASTERCAPS_FOGTABLE 0x00000100
#define D3DPRASTERCAPS_ANTIALIASEDGES 0x00001000
#define D3DPRASTERCAPS_MIPMAPLODBIAS 0x00002000
#define D3DPRASTERCAPS_ZBIAS 0x00004000
#define D3DPRASTERCAPS_ZBUFFERLESSHSR 0x00008000
#define D3DPRASTERCAPS_FOGRANGE 0x00010000
#define D3DPRASTERCAPS_ANISOTROPY 0x00020000
#define D3DPRASTERCAPS_WBUFFER 0x00040000
#define D3DPRASTERCAPS_WFOG 0x00100000
#define D3DPRASTERCAPS_ZFOG 0x00200000
#define D3DPRASTERCAPS_COLORPERSPECTIVE 0x00400000
#define D3DPRASTERCAPS_STRETCHBLTMULTISAMPLE 0x00800000

#define D3DPCMPCAPS_NEVER 0x00000001
#define D3DPCMPCAPS_LESS 0x00000002
#define D3DPCMPCAPS_EQUAL 0x00000004
#define D3DPCMPCAPS_LESSEQUAL 0x00000008
#define D3DPCMPCAPS_GREATER 0x00000010
#define D3DPCMPCAPS_NOTEQUAL 0x00000020
#define D3DPCMPCAPS_GREATEREQUAL 0x00000040
#define D3DPCMPCAPS_ALWAYS 0x00000080

#define D3DPBLENDCAPS_ZERO 0x00000001
#define D3DPBLENDCAPS_ONE 0x00000002
#define D3DPBLENDCAPS_SRCCOLOR 0x00000004
#define D3DPBLENDCAPS_INVSRCCOLOR 0x00000008
#define D3DPBLENDCAPS_SRCALPHA 0x00000010
#define D3DPBLENDCAPS_INVSRCALPHA 0x00000020
#define D3DPBLENDCAPS_DESTALPHA 0x00000040
#define D3DPBLENDCAPS_INVDESTALPHA 0x00000080
#define D3DPBLENDCAPS_DESTCOLOR 0x00000100
#define D3DPBLENDCAPS_INVDESTCOLOR 0x00000200
#define D3DPBLENDCAPS_SRCALPHASAT 0x00000400
#define D3DPBLENDCAPS_BOTHSRCALPHA 0x00000800
#define D3DPBLENDCAPS_BOTHINVSRCALPHA 0x00001000

#define D3DPSHADECAPS_COLORGOURAUDRGB 0x00000008
#define D3DPSHADECAPS_SPECULARGOURAUDRGB 0x00000200
#define D3DPSHADECAPS_ALPHAGOURAUDBLEND 0x00004000
#define D3DPSHADECAPS_FOGGOURAUD 0x00080000

#define D3DPTEXTURECAPS_PERSPECTIVE 0x00000001
#define D3DPTEXTURECAPS_POW2 0x00000002
#define D3DPTEXTURECAPS_ALPHA 0x00000004
#define D3DPTEXTURECAPS_SQUAREONLY 0x00000020
#define D3DPTEXTURECAPS_TEXREPEATNOTSCALEDBYSIZE 0x00000040
#define D3DPTEXTURECAPS_ALPHAPALETTE 0x00000080
#define D3DPTEXTURECAPS_NONPOW2CONDITIONAL 0x00000100
#define D3DPTEXTURECAPS_PROJECTED 0x00000400
#define D3DPTEXTURECAPS_CUBEMAP 0x00000800
#define D3DPTEXTURECAPS_VOLUMEMAP 0x00002000
#define D3DPTEXTURECAPS_MIPMAP 0x00004000
#define D3DPTEXTURECAPS_MIPVOLUMEMAP 0x00008000
#define D3DPTEXTURECAPS_MIPCUBEMAP 0x00010000
#define D3DPTEXTURECAPS_CUBEMAP_POW2 0x00020000
#define D3DPTEXTURECAPS_VOLUMEMAP_POW2 0x00040000

#define D3DPTFILTERCAPS_MINFPOINT 0x00000100
#define D3DPTFILTERCAPS_MINFLINEAR 0x00000200
#define D3DPTFILTERCAPS_MINFANISOTROPIC 0x00000400
#define D3DPTFILTERCAPS_MIPFPOINT 0x00010000
#define D3DPTFILTERCAPS_MIPFLINEAR 0x00020000
#define D3DPTFILTERCAPS_MAGFPOINT 0x01000000
#define D3DPTFILTERCAPS_MAGFLINEAR 0x02000000
#define D3DPTFILTERCAPS_MAGFANISOTROPIC 0x04000000
#define D3DPTFILTERCAPS_MAGFAFLATCUBIC 0x08000000
#define D3DPTFILTERCAPS_MAGFGAUSSIANCUBIC 0x10000000

#define D3DPTADDRESSCAPS_WRAP 0x00000001
#define D3DPTADDRESSCAPS_MIRROR 0x00000002
#define D3DPTADDRESSCAPS_CLAMP 0x00000004
#define D3DPTADDRESSCAPS_BORDER 0x00000008
#define D3DPTADDRESSCAPS_INDEPENDENTUV 0x00000010
#define D3DPTADDRESSCAPS_MIRRORONCE 0x00000020

#define D3DSTENCILCAPS_KEEP 0x00000001
#define D3DSTENCILCAPS_ZERO 0x00000002
#define D3DSTENCILCAPS_REPLACE 0x00000004
#define D3DSTENCILCAPS_INCRSAT 0x00000008
#define D3DSTENCILCAPS_DECRSAT 0x00000010
#define D3DSTENCILCAPS_INVERT 0x00000020
#define D3DSTENCILCAPS_INCR 0x00000040
#define D3DSTENCILCAPS_DECR 0x00000080

#define D3DTEXOPCAPS_DISABLE 0x00000001
#define D3DTEXOPCAPS_SELECTARG1 0x00000002
#define D3DTEXOPCAPS_SELECTARG2 0x00000004
#define D3DTEXOPCAPS_MODULATE 0x00000008
#define D3DTEXOPCAPS_MODULATE2X 0x00000010
#define D3DTEXOPCAPS_MODULATE4X 0x00000020
#define D3DTEXOPCAPS_ADD 0x00000040
#define D3DTEXOPCAPS_ADDSIGNED 0x00000080
#define D3DTEXOPCAPS_ADDSIGNED2X 0x00000100
#define D3DTEXOPCAPS_SUBTRACT 0x00000200
#define D3DTEXOPCAPS_ADDSMOOTH 0x00000400
#define D3DTEXOPCAPS_BLENDDIFFUSEALPHA 0x00000800
#define D3DTEXOPCAPS_BLENDTEXTUREALPHA 0x00001000
#define D3DTEXOPCAPS_BLENDFACTORALPHA 0x00002000
#define D3DTEXOPCAPS_BLENDTEXTUREALPHAPM 0x00004000
#define D3DTEXOPCAPS_BLENDCURRENTALPHA 0x00008000
#define D3DTEXOPCAPS_PREMODULATE 0x00010000
#define D3DTEXOPCAPS_MODULATEALPHA_ADDCOLOR 0x00020000
#define D3DTEXOPCAPS_MODULATECOLOR_ADDALPHA 0x00040000
#define D3DTEXOPCAPS_MODULATEINVALPHA_ADDCOLOR 0x00080000
#define D3DTEXOPCAPS_MODULATEINVCOLOR_ADDALPHA 0x00100000
#define D3DTEXOPCAPS_BUMPENVMAP 0x00200000
#define D3DTEXOPCAPS_BUMPENVMAPLUMINANCE 0x00400000
#define D3DTEXOPCAPS_DOTPRODUCT3 0x00800000
#define D3DTEXOPCAPS_MULTIPLYADD 0x01000000
#define D3DTEXOPCAPS_LERP 0x02000000

#define D3DFVFCAPS_TEXCOORDCOUNTMASK 0x0000FFFF
#define D3DFVFCAPS_DONOTSTRIPELEMENTS 0x00080000
#define D3DFVFCAPS_PSIZE 0x00100000

#define D3DVTXPCAPS_TEXGEN 0x00000001
#define D3DVTXPCAPS_MATERIALSOURCE7 0x00000002
#define D3DVTXPCAPS_DIRECTIONALLIGHTS 0x00000008
#define D3DVTXPCAPS_POSITIONALLIGHTS 0x00000010
#define D3DVTXPCAPS_LOCALVIEWER 0x00000020
#define D3DVTXPCAPS_TWEENING 0x00000040
#define D3DVTXPCAPS_NO_VSDT_UBYTE4 0x00000080

#define D3DERR_INVALIDCALL MAKE_HRESULT(1, 0x876, 2156)

#define D3DCOLORWRITEENABLE_RED 1L
#define D3DCOLORWRITEENABLE_GREEN 2L
#define D3DCOLORWRITEENABLE_BLUE 4L
#define D3DCOLORWRITEENABLE_ALPHA 8L

#ifndef MAKEFOURCC
#    define MAKEFOURCC(c0, c1, c2, c3)                                         \
        (::DWORD(::BYTE(c0)) | ::DWORD(::BYTE(c1)) << 8 |                      \
         ::DWORD(::BYTE(c2)) << 16 | ::DWORD(::BYTE(c3)) << 24)
#endif

struct IDirect3D8;
struct IDirect3DDevice8;
struct IDirect3DResource8;
struct IDirect3DBaseTexture8;
struct IDirect3DTexture8;
struct IDirect3DVolumeTexture8;
struct IDirect3DCubeTexture8;
struct IDirect3DVertexBuffer8;
struct IDirect3DIndexBuffer8;
struct IDirect3DSurface8;
struct IDirect3DVolume8;
struct IDirect3DSwapChain8;

#ifndef D3DCOLOR_DEFINED
#    define D3DCOLOR_DEFINED
using D3DCOLOR = ::DWORD;
#endif

#define D3DCOLOR_ARGB(a, r, g, b)                                              \
    ::D3DCOLOR(                                                                \
        ((a) &0xff) << 24 | ((r) &0xff) << 16 | ((g) &0xff) << 8 | (b) &0xff)

enum D3DFORMAT
{
    D3DFMT_UNKNOWN      = 0,
    D3DFMT_R8G8B8       = 20,
    D3DFMT_A8R8G8B8     = 21,
    D3DFMT_X8R8G8B8     = 22,
    D3DFMT_R5G6B5       = 23,
    D3DFMT_X1R5G5B5     = 24,
    D3DFMT_A1R5G5B5     = 25,
    D3DFMT_A4R4G4B4     = 26,
    D3DFMT_R3G3B2       = 27,
    D3DFMT_A8           = 28,
    D3DFMT_A8R3G3B2     = 29,
    D3DFMT_X4R4G4B4     = 30,
    D3DFMT_A8P8         = 40,
    D3DFMT_P8           = 41,
    D3DFMT_L8           = 50,
    D3DFMT_A8L8         = 51,
    D3DFMT_A4L4         = 52,
    D3DFMT_V8U8         = 60,
    D3DFMT_L6V5U5       = 61,
    D3DFMT_X8L8V8U8     = 62,
    D3DFMT_Q8W8V8U8     = 63,
    D3DFMT_V16U16       = 64,
    D3DFMT_W11V11U10    = 65,
    D3DFMT_UYVY         = MAKEFOURCC('U', 'Y', 'V', 'Y'),
    D3DFMT_YUY2         = MAKEFOURCC('Y', 'U', 'Y', '2'),
    D3DFMT_DXT1         = MAKEFOURCC('D', 'X', 'T', '1'),
    D3DFMT_DXT2         = MAKEFOURCC('D', 'X', 'T', '2'),
    D3DFMT_DXT3         = MAKEFOURCC('D', 'X', 'T', '3'),
    D3DFMT_DXT4         = MAKEFOURCC('D', 'X', 'T', '4'),
    D3DFMT_DXT5         = MAKEFOURCC('D', 'X', 'T', '5'),
    D3DFMT_D16_LOCKABLE = 70,
    D3DFMT_D32          = 71,
    D3DFMT_D15S1        = 73,
    D3DFMT_D24S8        = 75,
    D3DFMT_D16          = 80,
    D3DFMT_D24X8        = 77,
    D3DFMT_D24X4S4      = 79,
    D3DFMT_VERTEXDATA   = 100,
    D3DFMT_INDEX16      = 101,
    D3DFMT_INDEX32      = 102,

    D3DFMT_FORCE_DWORD = 0x7FFFFFFF
};

enum D3DDEVTYPE
{
    D3DDEVTYPE_HAL = 1,
    D3DDEVTYPE_REF = 2,
    D3DDEVTYPE_SW  = 3,

    D3DDEVTYPE_FORCE_DWORD = 0x7FFFFFFF
};

enum D3DRESOURCETYPE
{
    D3DRTYPE_SURFACE       = 1,
    D3DRTYPE_VOLUME        = 2,
    D3DRTYPE_TEXTURE       = 3,
    D3DRTYPE_VOLUMETEXTURE = 4,
    D3DRTYPE_CUBETEXTURE   = 5,
    D3DRTYPE_VERTEXBUFFER  = 6,
    D3DRTYPE_INDEXBUFFER   = 7,

    D3DRTYPE_FORCE_DWORD = 0x7FFFFFFF
};

enum D3DMULTISAMPLE_TYPE
{
    D3DMULTISAMPLE_NONE       = 0,
    D3DMULTISAMPLE_2_SAMPLES  = 2,
    D3DMULTISAMPLE_3_SAMPLES  = 3,
    D3DMULTISAMPLE_4_SAMPLES  = 4,
    D3DMULTISAMPLE_5_SAMPLES  = 5,
    D3DMULTISAMPLE_6_SAMPLES  = 6,
    D3DMULTISAMPLE_7_SAMPLES  = 7,
    D3DMULTISAMPLE_8_SAMPLES  = 8,
    D3DMULTISAMPLE_9_SAMPLES  = 9,
    D3DMULTISAMPLE_10_SAMPLES = 10,
    D3DMULTISAMPLE_11_SAMPLES = 11,
    D3DMULTISAMPLE_12_SAMPLES = 12,
    D3DMULTISAMPLE_13_SAMPLES = 13,
    D3DMULTISAMPLE_14_SAMPLES = 14,
    D3DMULTISAMPLE_15_SAMPLES = 15,
    D3DMULTISAMPLE_16_SAMPLES = 16,

    D3DMULTISAMPLE_FORCE_DWORD = 0x7FFFFFFF
};

enum D3DSWAPEFFECT
{
    D3DSWAPEFFECT_DISCARD    = 1,
    D3DSWAPEFFECT_FLIP       = 2,
    D3DSWAPEFFECT_COPY       = 3,
    D3DSWAPEFFECT_COPY_VSYNC = 4,

    D3DSWAPEFFECT_FORCE_DWORD = 0x7FFFFFFF
};

enum D3DPOOL
{
    D3DPOOL_DEFAULT   = 0,
    D3DPOOL_MANAGED   = 1,
    D3DPOOL_SYSTEMMEM = 2,

    D3DPOOL_FORCE_DWORD = 0x7FFFFFFF
};

enum D3DBACKBUFFER_TYPE
{
    D3DBACKBUFFER_TYPE_MONO  = 0,
    D3DBACKBUFFER_TYPE_LEFT  = 1,
    D3DBACKBUFFER_TYPE_RIGHT = 2,

    D3DBACKBUFFER_TYPE_FORCE_DWORD = 0x7FFFFFFF
};

enum D3DCUBEMAP_FACES
{
    D3DCUBEMAP_FACE_POSITIVE_X = 0,
    D3DCUBEMAP_FACE_NEGATIVE_X = 1,
    D3DCUBEMAP_FACE_POSITIVE_Y = 2,
    D3DCUBEMAP_FACE_NEGATIVE_Y = 3,
    D3DCUBEMAP_FACE_POSITIVE_Z = 4,
    D3DCUBEMAP_FACE_NEGATIVE_Z = 5,

    D3DCUBEMAP_FACE_FORCE_DWORD = 0x7FFFFFFF
};

enum D3DTRANSFORMSTATETYPE
{
    D3DTS_VIEW       = 2,
    D3DTS_PROJECTION = 3,
    D3DTS_TEXTURE0   = 16,
    D3DTS_TEXTURE1   = 17,
    D3DTS_TEXTURE2   = 18,
    D3DTS_TEXTURE3   = 19,
    D3DTS_TEXTURE4   = 20,
    D3DTS_TEXTURE5   = 21,
    D3DTS_TEXTURE6   = 22,
    D3DTS_TEXTURE7   = 23,

    D3DTS_FORCE_DWORD = 0x7FFFFFFF
};

enum D3DLIGHTTYPE
{
    D3DLIGHT_POINT       = 1,
    D3DLIGHT_SPOT        = 2,
    D3DLIGHT_DIRECTIONAL = 3,

    D3DLIGHT_FORCE_DWORD = 0x7FFFFFFF
};

enum D3DRENDERSTATETYPE
{
    D3DRS_ZENABLE                  = 7,
    D3DRS_FILLMODE                 = 8,
    D3DRS_SHADEMODE                = 9,
    D3DRS_LINEPATTERN              = 10,
    D3DRS_ZWRITEENABLE             = 14,
    D3DRS_ALPHATESTENABLE          = 15,
    D3DRS_LASTPIXEL                = 16,
    D3DRS_SRCBLEND                 = 19,
    D3DRS_DESTBLEND                = 20,
    D3DRS_CULLMODE                 = 22,
    D3DRS_ZFUNC                    = 23,
    D3DRS_ALPHAREF                 = 24,
    D3DRS_ALPHAFUNC                = 25,
    D3DRS_DITHERENABLE             = 26,
    D3DRS_ALPHABLENDENABLE         = 27,
    D3DRS_FOGENABLE                = 28,
    D3DRS_SPECULARENABLE           = 29,
    D3DRS_ZVISIBLE                 = 30,
    D3DRS_FOGCOLOR                 = 34,
    D3DRS_FOGTABLEMODE             = 35,
    D3DRS_FOGSTART                 = 36,
    D3DRS_FOGEND                   = 37,
    D3DRS_FOGDENSITY               = 38,
    D3DRS_EDGEANTIALIAS            = 40,
    D3DRS_ZBIAS                    = 47,
    D3DRS_RANGEFOGENABLE           = 48,
    D3DRS_STENCILENABLE            = 52,
    D3DRS_STENCILFAIL              = 53,
    D3DRS_STENCILZFAIL             = 54,
    D3DRS_STENCILPASS              = 55,
    D3DRS_STENCILFUNC              = 56,
    D3DRS_STENCILREF               = 57,
    D3DRS_STENCILMASK              = 58,
    D3DRS_STENCILWRITEMASK         = 59,
    D3DRS_TEXTUREFACTOR            = 60,
    D3DRS_WRAP0                    = 128,
    D3DRS_WRAP1                    = 129,
    D3DRS_WRAP2                    = 130,
    D3DRS_WRAP3                    = 131,
    D3DRS_WRAP4                    = 132,
    D3DRS_WRAP5                    = 133,
    D3DRS_WRAP6                    = 134,
    D3DRS_WRAP7                    = 135,
    D3DRS_CLIPPING                 = 136,
    D3DRS_LIGHTING                 = 137,
    D3DRS_AMBIENT                  = 139,
    D3DRS_FOGVERTEXMODE            = 140,
    D3DRS_COLORVERTEX              = 141,
    D3DRS_LOCALVIEWER              = 142,
    D3DRS_NORMALIZENORMALS         = 143,
    D3DRS_DIFFUSEMATERIALSOURCE    = 145,
    D3DRS_SPECULARMATERIALSOURCE   = 146,
    D3DRS_AMBIENTMATERIALSOURCE    = 147,
    D3DRS_EMISSIVEMATERIALSOURCE   = 148,
    D3DRS_VERTEXBLEND              = 151,
    D3DRS_CLIPPLANEENABLE          = 152,
    D3DRS_SOFTWAREVERTEXPROCESSING = 153,
    D3DRS_POINTSIZE                = 154,
    D3DRS_POINTSIZE_MIN            = 155,
    D3DRS_POINTSPRITEENABLE        = 156,
    D3DRS_POINTSCALEENABLE         = 157,
    D3DRS_POINTSCALE_A             = 158,
    D3DRS_POINTSCALE_B             = 159,
    D3DRS_POINTSCALE_C             = 160,
    D3DRS_MULTISAMPLEANTIALIAS     = 161,
    D3DRS_MULTISAMPLEMASK          = 162,
    D3DRS_PATCHEDGESTYLE           = 163,
    D3DRS_PATCHSEGMENTS            = 164,
    D3DRS_DEBUGMONITORTOKEN        = 165,
    D3DRS_POINTSIZE_MAX            = 166,
    D3DRS_INDEXEDVERTEXBLENDENABLE = 167,
    D3DRS_COLORWRITEENABLE         = 168,
    D3DRS_TWEENFACTOR              = 170,
    D3DRS_BLENDOP                  = 171,

    D3DRS_FORCE_DWORD = 0x7FFFFFFF
};

enum D3DCMPFUNC
{
    D3DCMP_NEVER        = 1,
    D3DCMP_LESS         = 2,
    D3DCMP_EQUAL        = 3,
    D3DCMP_LESSEQUAL    = 4,
    D3DCMP_GREATER      = 5,
    D3DCMP_NOTEQUAL     = 6,
    D3DCMP_GREATEREQUAL = 7,
    D3DCMP_ALWAYS       = 8,

    D3DCMP_FORCE_DWORD = 0x7fffffff
};

enum D3DSTENCILOP
{
    D3DSTENCILOP_KEEP        = 1,
    D3DSTENCILOP_ZERO        = 2,
    D3DSTENCILOP_REPLACE     = 3,
    D3DSTENCILOP_INCRSAT     = 4,
    D3DSTENCILOP_DECRSAT     = 5,
    D3DSTENCILOP_INVERT      = 6,
    D3DSTENCILOP_INCR        = 7,
    D3DSTENCILOP_DECR        = 8,
    D3DSTENCILOP_FORCE_DWORD = 0x7fffffff
};

enum D3DSTATEBLOCKTYPE
{
    D3DSBT_ALL         = 1,
    D3DSBT_PIXELSTATE  = 2,
    D3DSBT_VERTEXSTATE = 3,

    D3DSBT_FORCE_DWORD = 0x7FFFFFFF
};

enum D3DTEXTURESTAGESTATETYPE
{
    D3DTSS_COLOROP               = 1,
    D3DTSS_COLORARG1             = 2,
    D3DTSS_COLORARG2             = 3,
    D3DTSS_ALPHAOP               = 4,
    D3DTSS_ALPHAARG1             = 5,
    D3DTSS_ALPHAARG2             = 6,
    D3DTSS_BUMPENVMAT00          = 7,
    D3DTSS_BUMPENVMAT01          = 8,
    D3DTSS_BUMPENVMAT10          = 9,
    D3DTSS_BUMPENVMAT11          = 10,
    D3DTSS_TEXCOORDINDEX         = 11,
    D3DTSS_ADDRESSU              = 13,
    D3DTSS_ADDRESSV              = 14,
    D3DTSS_BORDERCOLOR           = 15,
    D3DTSS_MAGFILTER             = 16,
    D3DTSS_MINFILTER             = 17,
    D3DTSS_MIPFILTER             = 18,
    D3DTSS_MIPMAPLODBIAS         = 19,
    D3DTSS_MAXMIPLEVEL           = 20,
    D3DTSS_MAXANISOTROPY         = 21,
    D3DTSS_BUMPENVLSCALE         = 22,
    D3DTSS_BUMPENVLOFFSET        = 23,
    D3DTSS_TEXTURETRANSFORMFLAGS = 24,
    D3DTSS_ADDRESSW              = 25,
    D3DTSS_COLORARG0             = 26,
    D3DTSS_ALPHAARG0             = 27,
    D3DTSS_RESULTARG             = 28,

    D3DTSS_FORCE_DWORD = 0x7FFFFFFF
};

enum D3DPRIMITIVETYPE
{
    D3DPT_POINTLIST     = 1,
    D3DPT_LINELIST      = 2,
    D3DPT_LINESTRIP     = 3,
    D3DPT_TRIANGLELIST  = 4,
    D3DPT_TRIANGLESTRIP = 5,
    D3DPT_TRIANGLEFAN   = 6,

    D3DPT_FORCE_DWORD = 0x7FFFFFFF
};

enum D3DBASISTYPE
{
    D3DBASIS_BEZIER      = 0,
    D3DBASIS_BSPLINE     = 1,
    D3DBASIS_INTERPOLATE = 2,

    D3DBASIS_FORCE_DWORD = 0x7FFFFFFF
};

enum D3DORDERTYPE
{
    D3DORDER_LINEAR  = 1,
    D3DORDER_CUBIC   = 3,
    D3DORDER_QUINTIC = 5,

    D3DORDER_FORCE_DWORD = 0x7FFFFFFF
};

enum D3DZBUFFERTYPE
{
    D3DZB_FALSE = 0,
    D3DZB_TRUE  = 1,
    D3DZB_USEW  = 2,

    D3DZB_FORCE_DWORD = 0x7FFFFFFF
};

enum D3DFILLMODE
{
    D3DFILL_POINT     = 1,
    D3DFILL_WIREFRAME = 2,
    D3DFILL_SOLID     = 3,

    D3DFILL_FORCE_DWORD = 0x7FFFFFFF
};

enum D3DSHADEMODE
{
    D3DSHADE_FLAT    = 1,
    D3DSHADE_GOURAUD = 2,
    D3DSHADE_PHONG   = 3,

    D3DSHADE_FORCE_DWORD = 0x7fffffff
};

enum D3DCULL
{
    D3DCULL_NONE = 1,
    D3DCULL_CW   = 2,
    D3DCULL_CCW  = 3,

    D3DCULL_FORCE_DWORD = 0x7FFFFFFF
};

enum D3DFOGMODE
{
    D3DFOG_NONE   = 0,
    D3DFOG_EXP    = 1,
    D3DFOG_EXP2   = 2,
    D3DFOG_LINEAR = 3,

    D3DFOG_FORCE_DWORD = 0x7fffffff
};

enum D3DTEXTUREADDRESS
{
    D3DTADDRESS_WRAP       = 1,
    D3DTADDRESS_MIRROR     = 2,
    D3DTADDRESS_CLAMP      = 3,
    D3DTADDRESS_BORDER     = 4,
    D3DTADDRESS_MIRRORONCE = 5,

    D3DTADDRESS_FORCE_DWORD = 0x7FFFFFFF
};

enum D3DTEXTUREOP
{
    D3DTOP_DISABLE                   = 1,
    D3DTOP_SELECTARG1                = 2,
    D3DTOP_SELECTARG2                = 3,
    D3DTOP_MODULATE                  = 4,
    D3DTOP_MODULATE2X                = 5,
    D3DTOP_MODULATE4X                = 6,
    D3DTOP_ADD                       = 7,
    D3DTOP_ADDSIGNED                 = 8,
    D3DTOP_ADDSIGNED2X               = 9,
    D3DTOP_SUBTRACT                  = 10,
    D3DTOP_ADDSMOOTH                 = 11,
    D3DTOP_BLENDDIFFUSEALPHA         = 12,
    D3DTOP_BLENDTEXTUREALPHA         = 13,
    D3DTOP_BLENDFACTORALPHA          = 14,
    D3DTOP_BLENDTEXTUREALPHAPM       = 15,
    D3DTOP_BLENDCURRENTALPHA         = 16,
    D3DTOP_PREMODULATE               = 17,
    D3DTOP_MODULATEALPHA_ADDCOLOR    = 18,
    D3DTOP_MODULATECOLOR_ADDALPHA    = 19,
    D3DTOP_MODULATEINVALPHA_ADDCOLOR = 20,
    D3DTOP_MODULATEINVCOLOR_ADDALPHA = 21,
    D3DTOP_BUMPENVMAP                = 22,
    D3DTOP_BUMPENVMAPLUMINANCE       = 23,
    D3DTOP_DOTPRODUCT3               = 24,
    D3DTOP_MULTIPLYADD               = 25,
    D3DTOP_LERP                      = 26,

    D3DTOP_FORCE_DWORD = 0x7FFFFFFF
};

enum D3DTEXTUREFILTERTYPE
{
    D3DTEXF_NONE          = 0,
    D3DTEXF_POINT         = 1,
    D3DTEXF_LINEAR        = 2,
    D3DTEXF_ANISOTROPIC   = 3,
    D3DTEXF_FLATCUBIC     = 4,
    D3DTEXF_GAUSSIANCUBIC = 5,

    D3DTEXF_FORCE_DWORD = 0x7FFFFFFF
};

enum D3DTEXTURETRANSFORMFLAGS
{
    D3DTTFF_DISABLE   = 0,
    D3DTTFF_COUNT1    = 1,
    D3DTTFF_COUNT2    = 2,
    D3DTTFF_COUNT3    = 3,
    D3DTTFF_COUNT4    = 4,
    D3DTTFF_PROJECTED = 256,

    D3DTTFF_FORCE_DWORD = 0x7fffffff
};

enum D3DBLEND
{
    D3DBLEND_ZERO            = 1,
    D3DBLEND_ONE             = 2,
    D3DBLEND_SRCCOLOR        = 3,
    D3DBLEND_INVSRCCOLOR     = 4,
    D3DBLEND_SRCALPHA        = 5,
    D3DBLEND_INVSRCALPHA     = 6,
    D3DBLEND_DESTALPHA       = 7,
    D3DBLEND_INVDESTALPHA    = 8,
    D3DBLEND_DESTCOLOR       = 9,
    D3DBLEND_INVDESTCOLOR    = 10,
    D3DBLEND_SRCALPHASAT     = 11,
    D3DBLEND_BOTHSRCALPHA    = 12,
    D3DBLEND_BOTHINVSRCALPHA = 13,

    D3DBLEND_FORCE_DWORD = 0x7FFFFFFF
};

enum D3DMATERIALCOLORSOURCE
{
    D3DMCS_MATERIAL = 0,
    D3DMCS_COLOR1   = 1,
    D3DMCS_COLOR2   = 2,

    D3DMCS_FORCE_DWORD = 0x7fffffff
};

enum D3DBLENDOP
{
    D3DBLENDOP_ADD         = 1,
    D3DBLENDOP_SUBTRACT    = 2,
    D3DBLENDOP_REVSUBTRACT = 3,
    D3DBLENDOP_MIN         = 4,
    D3DBLENDOP_MAX         = 5,

    D3DBLENDOP_FORCE_DWORD = 0x7fffffff
};

enum D3DVERTEXBLENDFLAGS
{
    D3DVBF_DISABLE  = 0,
    D3DVBF_1WEIGHTS = 1,
    D3DVBF_2WEIGHTS = 2,
    D3DVBF_3WEIGHTS = 3,
    D3DVBF_TWEENING = 255,
    D3DVBF_0WEIGHTS = 256
};

enum D3DPATCHEDGESTYLE
{
    D3DPATCHEDGE_DISCRETE   = 0,
    D3DPATCHEDGE_CONTINUOUS = 1,

    D3DPATCHEDGE_FORCE_DWORD = 0x7fffffff
};

enum D3DDEBUGMONITORTOKENS
{
    D3DDMT_ENABLE  = 0,
    D3DDMT_DISABLE = 1,

    D3DDMT_FORCE_DWORD = 0x7fffffff
};

struct D3DADAPTER_IDENTIFIER8
{
    char Driver[MAX_DEVICE_IDENTIFIER_STRING];
    char Description[MAX_DEVICE_IDENTIFIER_STRING];
    ::LARGE_INTEGER DriverVersion;
    ::DWORD VendorId;
    ::DWORD DeviceId;
    ::DWORD SubSysId;
    ::DWORD Revision;
    ::GUID DeviceIdentifier;
    ::DWORD WHQLLevel;
};

struct D3DDISPLAYMODE
{
    ::UINT Width;
    ::UINT Height;
    ::UINT RefreshRate;
    ::D3DFORMAT Format;
};

struct D3DDEVICE_CREATION_PARAMETERS
{
    ::UINT AdapterOrdinal;
    ::D3DDEVTYPE DeviceType;
    ::HWND hFocusWindow;
    ::DWORD BehaviorFlags;
};

struct D3DCAPS8
{
    ::D3DDEVTYPE DeviceType;
    ::UINT AdapterOrdinal;
    ::DWORD Caps;
    ::DWORD Caps2;
    ::DWORD Caps3;
    ::DWORD PresentationIntervals;
    ::DWORD CursorCaps;
    ::DWORD DevCaps;
    ::DWORD PrimitiveMiscCaps;
    ::DWORD RasterCaps;
    ::DWORD ZCmpCaps;
    ::DWORD SrcBlendCaps;
    ::DWORD DestBlendCaps;
    ::DWORD AlphaCmpCaps;
    ::DWORD ShadeCaps;
    ::DWORD TextureCaps;
    ::DWORD TextureFilterCaps;
    ::DWORD CubeTextureFilterCaps;
    ::DWORD VolumeTextureFilterCaps;
    ::DWORD TextureAddressCaps;
    ::DWORD VolumeTextureAddressCaps;
    ::DWORD LineCaps;
    ::DWORD MaxTextureWidth, MaxTextureHeight;
    ::DWORD MaxVolumeExtent;
    ::DWORD MaxTextureRepeat;
    ::DWORD MaxTextureAspectRatio;
    ::DWORD MaxAnisotropy;
    float MaxVertexW;
    float GuardBandLeft;
    float GuardBandTop;
    float GuardBandRight;
    float GuardBandBottom;
    float ExtentsAdjust;
    ::DWORD StencilCaps;
    ::DWORD FVFCaps;
    ::DWORD TextureOpCaps;
    ::DWORD MaxTextureBlendStages;
    ::DWORD MaxSimultaneousTextures;
    ::DWORD VertexProcessingCaps;
    ::DWORD MaxActiveLights;
    ::DWORD MaxUserClipPlanes;
    ::DWORD MaxVertexBlendMatrices;
    ::DWORD MaxVertexBlendMatrixIndex;
    float MaxPointSize;
    ::DWORD MaxPrimitiveCount;
    ::DWORD MaxVertexIndex;
    ::DWORD MaxStreams;
    ::DWORD MaxStreamStride;
    ::DWORD VertexShaderVersion;
    ::DWORD MaxVertexShaderConst;
    ::DWORD PixelShaderVersion;
    float MaxPixelShaderValue;
};

struct D3DPRESENT_PARAMETERS
{
    ::UINT BackBufferWidth;
    ::UINT BackBufferHeight;
    ::D3DFORMAT BackBufferFormat;
    ::UINT BackBufferCount;
    ::D3DMULTISAMPLE_TYPE MultiSampleType;
    ::D3DSWAPEFFECT SwapEffect;
    ::HWND hDeviceWindow;
    ::BOOL Windowed;
    ::BOOL EnableAutoDepthStencil;
    ::D3DFORMAT AutoDepthStencilFormat;
    ::DWORD Flags;
    ::UINT FullScreen_RefreshRateInHz;
    ::UINT FullScreen_PresentationInterval;
};

struct D3DSURFACE_DESC
{
    ::D3DFORMAT Format;
    ::D3DRESOURCETYPE Type;
    ::DWORD Usage;
    ::D3DPOOL Pool;
    ::UINT Size;
    ::D3DMULTISAMPLE_TYPE MultiSampleType;
    ::UINT Width;
    ::UINT Height;
};

struct D3DLOCKED_RECT
{
    ::INT Pitch;
    void* pBits;
};

struct D3DRASTER_STATUS
{
    ::BOOL InVBlank;
    ::UINT ScanLine;
};

struct D3DGAMMARAMP
{
    ::WORD red[256];
    ::WORD green[256];
    ::WORD blue[256];
};

struct D3DVOLUME_DESC
{
    ::D3DFORMAT Format;
    ::D3DRESOURCETYPE Type;
    ::DWORD Usage;
    ::D3DPOOL Pool;
    ::UINT Size;
    ::UINT Width;
    ::UINT Height;
    ::UINT Depth;
};

struct D3DLOCKED_BOX
{
    ::INT RowPitch;
    ::INT SlicePitch;
    void* pBits;
};

struct D3DBOX
{
    ::UINT Left;
    ::UINT Top;
    ::UINT Right;
    ::UINT Bottom;
    ::UINT Front;
    ::UINT Back;
};

struct D3DVERTEXBUFFER_DESC
{
    ::D3DFORMAT Format;
    ::D3DRESOURCETYPE Type;
    ::DWORD Usage;
    ::D3DPOOL Pool;
    ::UINT Size;
    ::DWORD FVF;
};

struct D3DINDEXBUFFER_DESC
{
    ::D3DFORMAT Format;
    ::D3DRESOURCETYPE Type;
    ::DWORD Usage;
    ::D3DPOOL Pool;
    ::UINT Size;
};

struct D3DRECT
{
    ::LONG x1;
    ::LONG y1;
    ::LONG x2;
    ::LONG y2;
};

#if defined(__clang__)
#    pragma clang diagnostic push
#    pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
#    pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined(_MSC_VER)
#    pragma warning(push)
#    pragma warning(disable : 4201)
#endif
struct D3DMATRIX
{
    union
    {
        struct
        {
            float _11, _12, _13, _14;
            float _21, _22, _23, _24;
            float _31, _32, _33, _34;
            float _41, _42, _43, _44;
        };
        float m[4][4];
    };
};
#if defined(__clang__)
#    pragma clang diagnostic pop
#elif defined(_MSC_VER)
#    pragma warning(pop)
#endif

struct D3DVIEWPORT8
{
    ::DWORD X;
    ::DWORD Y;
    ::DWORD Width;
    ::DWORD Height;
    float MinZ;
    float MaxZ;
};

#ifndef D3DCOLORVALUE_DEFINED
#    define D3DCOLORVALUE_DEFINED
struct D3DCOLORVALUE
{
    float r;
    float g;
    float b;
    float a;
};
#endif

struct D3DMATERIAL8
{
    ::D3DCOLORVALUE Diffuse;
    ::D3DCOLORVALUE Ambient;
    ::D3DCOLORVALUE Specular;
    ::D3DCOLORVALUE Emissive;
    float Power;
};

struct D3DVECTOR
{
    float x;
    float y;
    float z;
};

struct D3DLIGHT8
{
    ::D3DLIGHTTYPE Type;
    ::D3DCOLORVALUE Diffuse;
    ::D3DCOLORVALUE Specular;
    ::D3DCOLORVALUE Ambient;
    ::D3DVECTOR Position;
    ::D3DVECTOR Direction;
    float Range;
    float Falloff;
    float Attenuation0;
    float Attenuation1;
    float Attenuation2;
    float Theta;
    float Phi;
};

struct D3DCLIPSTATUS8
{
    ::DWORD ClipUnion;
    ::DWORD ClipIntersection;
};

struct D3DRECTPATCH_INFO
{
    ::UINT StartVertexOffsetWidth;
    ::UINT StartVertexOffsetHeight;
    ::UINT Width;
    ::UINT Height;
    ::UINT Stride;
    ::D3DBASISTYPE Basis;
    ::D3DORDERTYPE Order;
};

struct D3DTRIPATCH_INFO
{
    ::UINT StartVertexOffset;
    ::UINT NumVertices;
    ::D3DBASISTYPE Basis;
    ::D3DORDERTYPE Order;
};

struct DECLSPEC_NOVTABLE IDirect3D8 : public ::IUnknown
{
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    QueryInterface(::IID const&, void**) override                 = 0;
    DECLSPEC_NOTHROW ::ULONG STDMETHODCALLTYPE AddRef() override  = 0;
    DECLSPEC_NOTHROW ::ULONG STDMETHODCALLTYPE Release() override = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    RegisterSoftwareDevice(void*)                                       = 0;
    virtual DECLSPEC_NOTHROW ::UINT STDMETHODCALLTYPE GetAdapterCount() = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetAdapterIdentifier(::UINT, ::DWORD, ::D3DADAPTER_IDENTIFIER8*) = 0;
    virtual DECLSPEC_NOTHROW ::UINT
        STDMETHODCALLTYPE GetAdapterModeCount(::UINT) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    EnumAdapterModes(::UINT, ::UINT, ::D3DDISPLAYMODE*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetAdapterDisplayMode(::UINT, ::D3DDISPLAYMODE*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE CheckDeviceType(
        ::UINT, ::D3DDEVTYPE, ::D3DFORMAT, ::D3DFORMAT, ::BOOL) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE CheckDeviceFormat(
        ::UINT, ::D3DDEVTYPE, ::D3DFORMAT, ::DWORD, ::D3DRESOURCETYPE,
        ::D3DFORMAT) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT
        STDMETHODCALLTYPE CheckDeviceMultiSampleType(
            ::UINT, ::D3DDEVTYPE, ::D3DFORMAT, ::BOOL,
            ::D3DMULTISAMPLE_TYPE) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE CheckDepthStencilMatch(
        ::UINT, ::D3DDEVTYPE, ::D3DFORMAT, ::D3DFORMAT, ::D3DFORMAT) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetDeviceCaps(::UINT, ::D3DDEVTYPE, ::D3DCAPS8*) = 0;
    virtual DECLSPEC_NOTHROW ::HMONITOR
        STDMETHODCALLTYPE GetAdapterMonitor(::UINT) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE CreateDevice(
        ::UINT, ::D3DDEVTYPE, ::HWND, ::DWORD, ::D3DPRESENT_PARAMETERS*,
        ::IDirect3DDevice8**) = 0;
};

using LPDIRECT3D8 = ::IDirect3D8*;
using PDIRECT3D8  = ::IDirect3D8*;

struct DECLSPEC_NOVTABLE IDirect3DDevice8 : public ::IUnknown
{
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    QueryInterface(::IID const&, void**) override                 = 0;
    DECLSPEC_NOTHROW ::ULONG STDMETHODCALLTYPE AddRef() override  = 0;
    DECLSPEC_NOTHROW ::ULONG STDMETHODCALLTYPE Release() override = 0;

    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    TestCooperativeLevel() = 0;
    virtual DECLSPEC_NOTHROW ::UINT STDMETHODCALLTYPE
    GetAvailableTextureMem() = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT
        STDMETHODCALLTYPE ResourceManagerDiscardBytes(::DWORD) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetDirect3D(::IDirect3D8**) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetDeviceCaps(::D3DCAPS8*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetDisplayMode(::D3DDISPLAYMODE*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetCreationParameters(::D3DDEVICE_CREATION_PARAMETERS*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    SetCursorProperties(::UINT, ::UINT, ::IDirect3DSurface8*) = 0;
    virtual DECLSPEC_NOTHROW void STDMETHODCALLTYPE
    SetCursorPosition(int, int, ::DWORD)                                 = 0;
    virtual DECLSPEC_NOTHROW ::BOOL STDMETHODCALLTYPE ShowCursor(::BOOL) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    CreateAdditionalSwapChain(
        ::D3DPRESENT_PARAMETERS*, ::IDirect3DSwapChain8**) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    Reset(::D3DPRESENT_PARAMETERS*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    Present(::RECT const*, ::RECT const*, ::HWND, ::RGNDATA const*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetBackBuffer(::UINT, ::D3DBACKBUFFER_TYPE, ::IDirect3DSurface8**) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetRasterStatus(::D3DRASTER_STATUS*) = 0;
    virtual DECLSPEC_NOTHROW void STDMETHODCALLTYPE
    SetGammaRamp(::DWORD, ::D3DGAMMARAMP const*) = 0;
    virtual DECLSPEC_NOTHROW void STDMETHODCALLTYPE
    GetGammaRamp(::D3DGAMMARAMP*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE CreateTexture(
        ::UINT, ::UINT, ::UINT, ::DWORD, ::D3DFORMAT, ::D3DPOOL,
        ::IDirect3DTexture8**) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE CreateVolumeTexture(
        ::UINT, ::UINT, ::UINT, ::UINT, ::DWORD, ::D3DFORMAT, ::D3DPOOL,
        ::IDirect3DVolumeTexture8**) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE CreateCubeTexture(
        ::UINT, ::UINT, ::DWORD, ::D3DFORMAT, ::D3DPOOL,
        ::IDirect3DCubeTexture8**) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE CreateVertexBuffer(
        ::UINT, ::DWORD, ::DWORD, ::D3DPOOL, ::IDirect3DVertexBuffer8**) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE CreateIndexBuffer(
        ::UINT, ::DWORD, ::D3DFORMAT, ::D3DPOOL, ::IDirect3DIndexBuffer8**) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE CreateRenderTarget(
        ::UINT, ::UINT, ::D3DFORMAT, ::D3DMULTISAMPLE_TYPE, ::BOOL,
        ::IDirect3DSurface8**) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    CreateDepthStencilSurface(
        ::UINT, ::UINT, ::D3DFORMAT, ::D3DMULTISAMPLE_TYPE,
        ::IDirect3DSurface8**) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    CreateImageSurface(::UINT, ::UINT, ::D3DFORMAT, ::IDirect3DSurface8**) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE CopyRects(
        ::IDirect3DSurface8*, ::RECT const*, ::UINT, ::IDirect3DSurface8*,
        ::POINT const*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    UpdateTexture(::IDirect3DBaseTexture8*, ::IDirect3DBaseTexture8*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetFrontBuffer(::IDirect3DSurface8*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    SetRenderTarget(::IDirect3DSurface8*, ::IDirect3DSurface8*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetRenderTarget(::IDirect3DSurface8**) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetDepthStencilSurface(::IDirect3DSurface8**)                     = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE BeginScene() = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE EndScene()   = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    Clear(::DWORD, ::D3DRECT const*, ::DWORD, ::D3DCOLOR, float, ::DWORD) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    SetTransform(::D3DTRANSFORMSTATETYPE, ::D3DMATRIX const*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetTransform(::D3DTRANSFORMSTATETYPE, ::D3DMATRIX*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    MultiplyTransform(::D3DTRANSFORMSTATETYPE, ::D3DMATRIX const*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    SetViewport(::D3DVIEWPORT8 const*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetViewport(::D3DVIEWPORT8*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    SetMaterial(::D3DMATERIAL8 const*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetMaterial(::D3DMATERIAL8*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    SetLight(::DWORD, ::D3DLIGHT8 const*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetLight(::DWORD, ::D3DLIGHT8*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT
        STDMETHODCALLTYPE LightEnable(::DWORD, ::BOOL) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetLightEnable(::DWORD, ::BOOL*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    SetClipPlane(::DWORD, float const*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetClipPlane(::DWORD, float*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT
        STDMETHODCALLTYPE SetRenderState(::D3DRENDERSTATETYPE, ::DWORD) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetRenderState(::D3DRENDERSTATETYPE, ::DWORD*)                         = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE BeginStateBlock() = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    EndStateBlock(::DWORD*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT
        STDMETHODCALLTYPE ApplyStateBlock(::DWORD) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT
        STDMETHODCALLTYPE CaptureStateBlock(::DWORD) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT
        STDMETHODCALLTYPE DeleteStateBlock(::DWORD) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    CreateStateBlock(::D3DSTATEBLOCKTYPE, ::DWORD*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    SetClipStatus(::D3DCLIPSTATUS8 const*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetClipStatus(::D3DCLIPSTATUS8*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetTexture(::DWORD, ::IDirect3DBaseTexture8**) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    SetTexture(::DWORD, ::IDirect3DBaseTexture8*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetTextureStageState(::DWORD, ::D3DTEXTURESTAGESTATETYPE, ::DWORD*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
        SetTextureStageState(::DWORD, ::D3DTEXTURESTAGESTATETYPE, ::DWORD) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    ValidateDevice(::DWORD*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetInfo(::DWORD, void*, ::DWORD) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    SetPaletteEntries(::UINT, ::PALETTEENTRY const*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetPaletteEntries(::UINT, ::PALETTEENTRY*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT
        STDMETHODCALLTYPE SetCurrentTexturePalette(::UINT) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetCurrentTexturePalette(::UINT*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT
        STDMETHODCALLTYPE DrawPrimitive(::D3DPRIMITIVETYPE, ::UINT, ::UINT) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE DrawIndexedPrimitive(
        ::D3DPRIMITIVETYPE, ::UINT, ::UINT, ::UINT, ::UINT) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    DrawPrimitiveUP(::D3DPRIMITIVETYPE, ::UINT, void const*, ::UINT) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE DrawIndexedPrimitiveUP(
        ::D3DPRIMITIVETYPE, ::UINT, ::UINT, ::UINT, void const*, ::D3DFORMAT,
        void const*, ::UINT) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE ProcessVertices(
        ::UINT, ::UINT, ::UINT, ::IDirect3DVertexBuffer8*, ::DWORD) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    CreateVertexShader(::DWORD const*, ::DWORD const*, ::DWORD*, ::DWORD) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT
        STDMETHODCALLTYPE SetVertexShader(::DWORD) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetVertexShader(::DWORD*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT
        STDMETHODCALLTYPE DeleteVertexShader(::DWORD) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    SetVertexShaderConstant(::DWORD, void const*, ::DWORD) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetVertexShaderConstant(::DWORD, void*, ::DWORD) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetVertexShaderDeclaration(::DWORD, void*, ::DWORD*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetVertexShaderFunction(::DWORD, void*, ::DWORD*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    SetStreamSource(::UINT, ::IDirect3DVertexBuffer8*, ::UINT) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetStreamSource(::UINT, ::IDirect3DVertexBuffer8**, ::UINT*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    SetIndices(::IDirect3DIndexBuffer8*, ::UINT) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetIndices(::IDirect3DIndexBuffer8**, ::UINT*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    CreatePixelShader(::DWORD const*, ::DWORD*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT
        STDMETHODCALLTYPE SetPixelShader(::DWORD) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetPixelShader(::DWORD*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT
        STDMETHODCALLTYPE DeletePixelShader(::DWORD) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    SetPixelShaderConstant(::DWORD, void const*, ::DWORD) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetPixelShaderConstant(::DWORD, void*, ::DWORD) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetPixelShaderFunction(::DWORD, void*, ::DWORD*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    DrawRectPatch(::UINT, float const*, ::D3DRECTPATCH_INFO const*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    DrawTriPatch(::UINT, float const*, ::D3DTRIPATCH_INFO const*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT
        STDMETHODCALLTYPE DeletePatch(::UINT) = 0;
};

using LPDIRECT3DDEVICE8 = ::IDirect3DDevice8*;
using PDIRECT3DDEVICE8  = ::IDirect3DDevice8*;

struct DECLSPEC_NOVTABLE IDirect3DResource8 : public ::IUnknown
{
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    QueryInterface(::IID const&, void**) override                 = 0;
    DECLSPEC_NOTHROW ::ULONG STDMETHODCALLTYPE AddRef() override  = 0;
    DECLSPEC_NOTHROW ::ULONG STDMETHODCALLTYPE Release() override = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetDevice(::IDirect3DDevice8**) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    SetPrivateData(::GUID const&, void const*, ::DWORD, ::DWORD) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetPrivateData(::GUID const&, void*, ::DWORD*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    FreePrivateData(::GUID const&)                                          = 0;
    virtual DECLSPEC_NOTHROW ::DWORD STDMETHODCALLTYPE SetPriority(::DWORD) = 0;
    virtual DECLSPEC_NOTHROW ::DWORD STDMETHODCALLTYPE GetPriority()        = 0;
    virtual DECLSPEC_NOTHROW void STDMETHODCALLTYPE PreLoad()               = 0;
    virtual DECLSPEC_NOTHROW ::D3DRESOURCETYPE STDMETHODCALLTYPE GetType()  = 0;
};

using LPDIRECT3DRESOURCE8 = ::IDirect3DResource8*;
using PDIRECT3DRESOURCE8  = ::IDirect3DResource8*;

struct DECLSPEC_NOVTABLE IDirect3DBaseTexture8 : public ::IDirect3DResource8
{
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    QueryInterface(::IID const&, void**) override                 = 0;
    DECLSPEC_NOTHROW ::ULONG STDMETHODCALLTYPE AddRef() override  = 0;
    DECLSPEC_NOTHROW ::ULONG STDMETHODCALLTYPE Release() override = 0;
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetDevice(::IDirect3DDevice8**) override = 0;
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    SetPrivateData(::GUID const&, void const*, ::DWORD, ::DWORD) override = 0;
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetPrivateData(::GUID const&, void*, ::DWORD*) override = 0;
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    FreePrivateData(::GUID const&) override = 0;
    DECLSPEC_NOTHROW ::DWORD
        STDMETHODCALLTYPE SetPriority(::DWORD) override                     = 0;
    DECLSPEC_NOTHROW ::DWORD STDMETHODCALLTYPE GetPriority() override       = 0;
    DECLSPEC_NOTHROW void STDMETHODCALLTYPE PreLoad() override              = 0;
    DECLSPEC_NOTHROW ::D3DRESOURCETYPE STDMETHODCALLTYPE GetType() override = 0;
    virtual DECLSPEC_NOTHROW ::DWORD STDMETHODCALLTYPE SetLOD(::DWORD)      = 0;
    virtual DECLSPEC_NOTHROW ::DWORD STDMETHODCALLTYPE GetLOD()             = 0;
    virtual DECLSPEC_NOTHROW ::DWORD STDMETHODCALLTYPE GetLevelCount()      = 0;
};

using LPDIRECT3DBASETEXTURE8 = ::IDirect3DBaseTexture8*;
using PDIRECT3DBASETEXTURE8  = ::IDirect3DBaseTexture8*;

struct DECLSPEC_NOVTABLE IDirect3DTexture8 : public ::IDirect3DBaseTexture8
{
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    QueryInterface(::IID const&, void**) override                 = 0;
    DECLSPEC_NOTHROW ::ULONG STDMETHODCALLTYPE AddRef() override  = 0;
    DECLSPEC_NOTHROW ::ULONG STDMETHODCALLTYPE Release() override = 0;
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetDevice(::IDirect3DDevice8**) override = 0;
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    SetPrivateData(::GUID const&, void const*, ::DWORD, ::DWORD) override = 0;
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetPrivateData(::GUID const&, void*, ::DWORD*) override = 0;
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    FreePrivateData(::GUID const&) override = 0;
    DECLSPEC_NOTHROW ::DWORD
        STDMETHODCALLTYPE SetPriority(::DWORD) override                     = 0;
    DECLSPEC_NOTHROW ::DWORD STDMETHODCALLTYPE GetPriority() override       = 0;
    DECLSPEC_NOTHROW void STDMETHODCALLTYPE PreLoad() override              = 0;
    DECLSPEC_NOTHROW ::D3DRESOURCETYPE STDMETHODCALLTYPE GetType() override = 0;
    DECLSPEC_NOTHROW ::DWORD STDMETHODCALLTYPE SetLOD(::DWORD) override     = 0;
    DECLSPEC_NOTHROW ::DWORD STDMETHODCALLTYPE GetLOD() override            = 0;
    DECLSPEC_NOTHROW ::DWORD STDMETHODCALLTYPE GetLevelCount() override     = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetLevelDesc(::UINT, ::D3DSURFACE_DESC*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetSurfaceLevel(::UINT, ::IDirect3DSurface8**) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    LockRect(::UINT, ::D3DLOCKED_RECT*, ::RECT const*, ::DWORD)             = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE UnlockRect(::UINT) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    AddDirtyRect(::RECT const*) = 0;
};

using LPDIRECT3DTEXTURE8 = ::IDirect3DTexture8*;
using PDIRECT3DTEXTURE8  = ::IDirect3DTexture8*;

struct DECLSPEC_NOVTABLE IDirect3DVolumeTexture8 :
    public ::IDirect3DBaseTexture8
{
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    QueryInterface(::IID const&, void**) override                 = 0;
    DECLSPEC_NOTHROW ::ULONG STDMETHODCALLTYPE AddRef() override  = 0;
    DECLSPEC_NOTHROW ::ULONG STDMETHODCALLTYPE Release() override = 0;
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetDevice(::IDirect3DDevice8**) override = 0;
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    SetPrivateData(::GUID const&, void const*, ::DWORD, ::DWORD) override = 0;
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetPrivateData(::GUID const&, void*, ::DWORD*) override = 0;
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    FreePrivateData(::GUID const&) override = 0;
    DECLSPEC_NOTHROW ::DWORD
        STDMETHODCALLTYPE SetPriority(::DWORD) override                     = 0;
    DECLSPEC_NOTHROW ::DWORD STDMETHODCALLTYPE GetPriority() override       = 0;
    DECLSPEC_NOTHROW void STDMETHODCALLTYPE PreLoad() override              = 0;
    DECLSPEC_NOTHROW ::D3DRESOURCETYPE STDMETHODCALLTYPE GetType() override = 0;
    DECLSPEC_NOTHROW ::DWORD STDMETHODCALLTYPE SetLOD(::DWORD) override     = 0;
    DECLSPEC_NOTHROW ::DWORD STDMETHODCALLTYPE GetLOD() override            = 0;
    DECLSPEC_NOTHROW ::DWORD STDMETHODCALLTYPE GetLevelCount() override     = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetLevelDesc(::UINT, ::D3DVOLUME_DESC*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetVolumeLevel(::UINT, ::IDirect3DVolume8**) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    LockBox(::UINT, ::D3DLOCKED_BOX*, ::D3DBOX const*, ::DWORD)            = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE UnlockBox(::UINT) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    AddDirtyBox(::D3DBOX const*) = 0;
};

using LPDIRECT3DVOLUMETEXTURE8 = ::IDirect3DVolumeTexture8*;
using PDIRECT3DVOLUMETEXTURE8  = ::IDirect3DVolumeTexture8*;

struct DECLSPEC_NOVTABLE IDirect3DCubeTexture8 : public ::IDirect3DBaseTexture8
{
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    QueryInterface(::IID const&, void**) override                 = 0;
    DECLSPEC_NOTHROW ::ULONG STDMETHODCALLTYPE AddRef() override  = 0;
    DECLSPEC_NOTHROW ::ULONG STDMETHODCALLTYPE Release() override = 0;
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetDevice(::IDirect3DDevice8**) override = 0;
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    SetPrivateData(::GUID const&, void const*, ::DWORD, ::DWORD) override = 0;
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetPrivateData(::GUID const&, void*, ::DWORD*) override = 0;
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    FreePrivateData(::GUID const&) override = 0;
    DECLSPEC_NOTHROW ::DWORD
        STDMETHODCALLTYPE SetPriority(::DWORD) override                     = 0;
    DECLSPEC_NOTHROW ::DWORD STDMETHODCALLTYPE GetPriority() override       = 0;
    DECLSPEC_NOTHROW void STDMETHODCALLTYPE PreLoad() override              = 0;
    DECLSPEC_NOTHROW ::D3DRESOURCETYPE STDMETHODCALLTYPE GetType() override = 0;
    DECLSPEC_NOTHROW ::DWORD STDMETHODCALLTYPE SetLOD(::DWORD) override     = 0;
    DECLSPEC_NOTHROW ::DWORD STDMETHODCALLTYPE GetLOD() override            = 0;
    DECLSPEC_NOTHROW ::DWORD STDMETHODCALLTYPE GetLevelCount() override     = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetLevelDesc(::UINT, ::D3DSURFACE_DESC*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetCubeMapSurface(::D3DCUBEMAP_FACES, ::UINT, ::IDirect3DSurface8**) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE LockRect(
        ::D3DCUBEMAP_FACES, ::UINT, ::D3DLOCKED_RECT*, ::RECT const*,
        ::DWORD) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT
        STDMETHODCALLTYPE UnlockRect(::D3DCUBEMAP_FACES, ::UINT) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    AddDirtyRect(::D3DCUBEMAP_FACES, ::RECT const*) = 0;
};

using LPDIRECT3DCUBETEXTURE8 = ::IDirect3DCubeTexture8*;
using PDIRECT3DCUBETEXTURE8  = ::IDirect3DCubeTexture8*;

struct DECLSPEC_NOVTABLE IDirect3DVertexBuffer8 : public ::IDirect3DResource8
{
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    QueryInterface(::IID const&, void**) override                 = 0;
    DECLSPEC_NOTHROW ::ULONG STDMETHODCALLTYPE AddRef() override  = 0;
    DECLSPEC_NOTHROW ::ULONG STDMETHODCALLTYPE Release() override = 0;
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetDevice(::IDirect3DDevice8**) override = 0;
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    SetPrivateData(::GUID const&, void const*, ::DWORD, ::DWORD) override = 0;
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetPrivateData(::GUID const&, void*, ::DWORD*) override = 0;
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    FreePrivateData(::GUID const&) override = 0;
    DECLSPEC_NOTHROW ::DWORD
        STDMETHODCALLTYPE SetPriority(::DWORD) override                     = 0;
    DECLSPEC_NOTHROW ::DWORD STDMETHODCALLTYPE GetPriority() override       = 0;
    DECLSPEC_NOTHROW void STDMETHODCALLTYPE PreLoad() override              = 0;
    DECLSPEC_NOTHROW ::D3DRESOURCETYPE STDMETHODCALLTYPE GetType() override = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    Lock(::UINT, ::UINT, ::BYTE**, ::DWORD)                       = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE Unlock() = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetDesc(::D3DVERTEXBUFFER_DESC*) = 0;
};

using LPDIRECT3DVERTEXBUFFER8 = ::IDirect3DVertexBuffer8*;
using PDIRECT3DVERTEXBUFFER8  = ::IDirect3DVertexBuffer8*;

struct DECLSPEC_NOVTABLE IDirect3DIndexBuffer8 : public ::IDirect3DResource8
{
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    QueryInterface(::IID const&, void**) override                 = 0;
    DECLSPEC_NOTHROW ::ULONG STDMETHODCALLTYPE AddRef() override  = 0;
    DECLSPEC_NOTHROW ::ULONG STDMETHODCALLTYPE Release() override = 0;
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetDevice(::IDirect3DDevice8**) override = 0;
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    SetPrivateData(::GUID const&, void const*, ::DWORD, ::DWORD) override = 0;
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetPrivateData(::GUID const&, void*, ::DWORD*) override = 0;
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    FreePrivateData(::GUID const&) override = 0;
    DECLSPEC_NOTHROW ::DWORD
        STDMETHODCALLTYPE SetPriority(::DWORD) override                     = 0;
    DECLSPEC_NOTHROW ::DWORD STDMETHODCALLTYPE GetPriority() override       = 0;
    DECLSPEC_NOTHROW void STDMETHODCALLTYPE PreLoad() override              = 0;
    DECLSPEC_NOTHROW ::D3DRESOURCETYPE STDMETHODCALLTYPE GetType() override = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    Lock(::UINT, ::UINT, ::BYTE**, ::DWORD)                       = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE Unlock() = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetDesc(::D3DINDEXBUFFER_DESC*) = 0;
};

using LPDIRECT3DINDEXBUFFER8 = ::IDirect3DIndexBuffer8*;
using PDIRECT3DINDEXBUFFER8  = ::IDirect3DIndexBuffer8*;

struct DECLSPEC_NOVTABLE IDirect3DSurface8 : public ::IUnknown
{
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    QueryInterface(::IID const&, void**) override                 = 0;
    DECLSPEC_NOTHROW ::ULONG STDMETHODCALLTYPE AddRef() override  = 0;
    DECLSPEC_NOTHROW ::ULONG STDMETHODCALLTYPE Release() override = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetDevice(::IDirect3DDevice8**) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    SetPrivateData(::GUID const&, void const*, ::DWORD, ::DWORD) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetPrivateData(::GUID const&, void*, ::DWORD*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    FreePrivateData(::GUID const&) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetContainer(::IID const&, void**) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetDesc(::D3DSURFACE_DESC*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    LockRect(::D3DLOCKED_RECT*, ::RECT const*, ::DWORD)               = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE UnlockRect() = 0;
};

using LPDIRECT3DSURFACE8 = ::IDirect3DSurface8*;
using PDIRECT3DSURFACE8  = ::IDirect3DSurface8*;

struct DECLSPEC_NOVTABLE IDirect3DVolume8 : public ::IUnknown
{
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    QueryInterface(::IID const&, void**) override                 = 0;
    DECLSPEC_NOTHROW ::ULONG STDMETHODCALLTYPE AddRef() override  = 0;
    DECLSPEC_NOTHROW ::ULONG STDMETHODCALLTYPE Release() override = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetDevice(::IDirect3DDevice8**) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    SetPrivateData(::GUID const&, void const*, ::DWORD, ::DWORD) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetPrivateData(::GUID const&, void*, ::DWORD*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    FreePrivateData(::GUID const&) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetContainer(::IID const&, void**) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetDesc(::D3DVOLUME_DESC*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    LockBox(::D3DLOCKED_BOX*, ::D3DBOX const*, ::DWORD)              = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE UnlockBox() = 0;
};

using LPDIRECT3DVOLUME8 = ::IDirect3DVolume8*;
using PDIRECT3DVOLUME8  = ::IDirect3DVolume8*;

struct DECLSPEC_NOVTABLE IDirect3DSwapChain8 : public ::IUnknown
{
    DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    QueryInterface(::IID const&, void**) override                 = 0;
    DECLSPEC_NOTHROW ::ULONG STDMETHODCALLTYPE AddRef() override  = 0;
    DECLSPEC_NOTHROW ::ULONG STDMETHODCALLTYPE Release() override = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    Present(::RECT const*, ::RECT const*, ::HWND, ::RGNDATA const*) = 0;
    virtual DECLSPEC_NOTHROW ::HRESULT STDMETHODCALLTYPE
    GetBackBuffer(::UINT, ::D3DBACKBUFFER_TYPE, ::IDirect3DSurface8**) = 0;
};

using LPDIRECT3DSWAPCHAIN8 = ::IDirect3DSwapChain8*;
using PDIRECT3DSWAPCHAIN8  = ::IDirect3DSwapChain8*;

::IDirect3D8* WINAPI Direct3DCreate8(::UINT);

#endif
